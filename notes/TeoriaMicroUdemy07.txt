								VIDEO 383 REMINDER ON VERSIONING RECORDS

Desde ahora el Tickets Srv va a usar otro field llamado 'version'.Lo emitirá también al publicar,informando así del orden cardinal de ese ticket.
Cada vez que se haga una operació adicional en un mismo ticket se aumentará el número de versió.
El Orders Srv va a mirar atentamente por este campo,de modo que si le viniera un ticket:updated con 15$ y version 3 pero en la DB la última grabación es la 1 no lo va a procesar.
Esto lo hacemos no llamado al metodo message.ack()(en realidad lo llamaremos condicionalmente desde ahora).
El evento volverá al NATS y será emitido al de 5seg de nuevo(lo bajamos de 30).
NOTA:para evitar eventos que rebotan indefinidamente en un servidor se puede implementar lógica,por ejemplo,con el numero de veces que ha rebotado,si es + de una cantidad x que se borre el evento.

Tanto mongoose como MongoDb pueden manejar este incremento de versión automáticamente,asi que no es algo difícil(un campo autoincremental)

				VIDEO 384 OPTIMISTIC CONCURRENCY CONTROL

Esta estrategia es agnóstica al gestor de DB,puedo usar SQL perfectamente con un versioning system.
Lo que se hará es buscar tanto por Id como por versión con el ORM,así no hay posibilidad de fallo.Una vez encontrado se procesa la operación y el gestor DB autoincrementa el campo.
Esto es el camino feliz,pero imaginemos que perdemos el updated a 10$(el dos) y nos llega el tres.Querremos buscar por un ticket con id 'xxx' y version de 2,pero cmo se perdió solo encontraremos la versión 1.

					VIDEO 385 MONGOOSE UPDATE-IF-CURRENT

Vamos a seguir el flujo de la app.Primero cambiaremos la DB del Tickets Srv,despues el modo de publicar que tiene y por último la recepción del evento y posterior guardado en el Orders Srv.

Vamos a usar un módulo que ayude a mongoose en esto(fijate que es para mongoose 5+).
El módulo está aqui:
https://www.npmjs.com/package/mongoose-update-if-current

Es un Optimistic concurrency control plugin for Mongoose v5.0 and higher,se importa el plugin desde el módulo y se añade o bien en global o a un determinado schema(a la instancia de mongoose o a la instancia del schema):

import { updateIfCurrentPlugin } from 'mongoose-update-if-current';
mongoose.plugin(updateIfCurrentPlugin) <- en global para todos los schemas
mySchema.plugin(updateIfCurrentPlugin) <- sólo ese schema

* Puede usar o el versionKey o el timestamp para incrementar la versión,el comportamiento por defecto será el __v,si quiero usar los timestamps tengo que habilitarlos y especificarlo en un segundo argumento que es un objeto:

mongoose.plugin(updateIfCurrentPlugin,{strategy:'timestamp'})

const mySchema = new mongoose.Schema({ ... }, { timestamps: true });
mySchema.plugin(updateIfCurrentPlugin, { strategy: 'timestamp' });

NOTA:fijate que el campo __v realmente nació para control de versiones,pues empieza en __v:0,pero lo vamos a renombrar a 'version' por legibilidad.

					VIDEO 386 IMPLEMENTING OOC

Con lo anterior en mente procedemos a instalar el módulo en el srv Tickets.Dado que vamos a renombrar el campo __v a version hay que especificarlo en la interfaz TicketDoc(que hereda de Document y dictamina que propiedades tiene una instancia de la DB,no la confundas con TicketAttrs que es una interfaz normal para el tipado):

// Interfaz que designa las propiedade requeridas para crear un nuevo Ticket.Es una simple interfaz para el tipado
interface TicketAttrs {
   title: string;
   price: number;
   userId: string;
}

// Interfaz que describe las propiedades que tendrá un Ticket una vez en la BBDD.Hereda de Document
interface TicketDoc extends Document {
   title: string;
   price: number;
   userId: string;
   version: number;
}

Dado que hay un bug que se resuelve en Mongoose 6+ tengo que usar ts-ignore:
ticketSchema.set('versionKey', 'version');
// @ts-ignore
ticketSchema.plugin(updateIfCurrentPlugin);

Fijate como con schema.set('oldProp','newName') podria renombrar propiedades. 

					VIDEO 388 TESTING OOC

Las nuevas versiones de jest no dejarán usar done() y return.O devuelvo la Promise o uso la callback.Con el return de la Promise me valdrá:

it('implements Optimistic Concurrency Control or OOC', async () => {
   // create an instance of a ticket
   const ticket = Ticket.build({
      title: 'concert',
      price: 5,
      userId: '123'
   });

   // save the ticket to the database
   await ticket.save();

   // fetch the ticket twice, es solo buscarlo,asin
   const firstInstance = await Ticket.findById(ticket.id);
   const secondInstance = await Ticket.findById(ticket.id);

   // make two separate changes to the tickets we fetched
   firstInstance!.set({ price: 10 });
   secondInstance!.set({ price: 15 });

   // save the first fetched ticket
   await firstInstance!.save();

   // save the second fetched ticket and expect an error
   try {
      await secondInstance!.save();

   } catch (err) {
      return;
   }
   // forma dos
   await expect(secondInstance!.save()).rejects.toThrow();

   throw new Error('Should not reach this point');
});

Fijate que ahora ya se puede hacer un await expect si es una Promise:
await expect(secondInstance!.save()).rejects.toThrow(); <- espero que esa promesa falle.Interesante.

					VIDEO 389 ONE MORE TEST

Actualmente no estamos testeando que el numero del campo version realmente incremente en uno.

   const ticket = Ticket.build({
      title: 'concert',
      price: 20,
      userId: '123'
   });

   await ticket.save();
   expect(ticket.version).toEqual(0);
   await ticket.save();
   expect(ticket.version).toEqual(1);
   await ticket.save();
   expect(ticket.version).toEqual(1); 

Puedo incluso cambiar alguno y ver que lo incrementará el sólo
Expected: 1
Received: 2

Ahora que ya tenemos implementada la OCC iremos al common module y agregaremos este campo 'field' en todos los eventos.

				VIDEO 390 WHO UPDATES VERSIONS?

¿Quien debe usar las versiones?Solo el  servicio PRINCIPAL responsable de grabar cualquier acción create/update/destroy debe emitir la versión también.NO los que lo reciban.Por ejemplo,en la primera app teniamos el Comment Srv,el Moderation Srv y el Query Srv,pues bien,sólo el Comment Srv puede cambiar la versión,ya que si recordamos el fluo primero se creaba un Comment,se Moderaba y despues iba al Query Srv que lo almacenaba.
Imaginate que el ModerationSrv también cambia la versión al moderarlo,esto no irá así en Microservicios,sólo habrá un Servicio responsable de versionar.En nuestro caso será Tickets srv,pero incluso si llama a otros que realicen alguna operación auxiliar,seguirá siendo él,el Tickets Srv,el que maneje las versiones(puede realizar un cambio tras recibir el Ticket tras esa operación auxiliar,pero será él y no ese servicio auxiliar).
En resumen debe estar centralizada en el srv principal la lógica del versionamiento.
NOTA:estos otros servicios auxiliares si que pueden incluir el campo 'version',pero no podrán cambiarlo.

Con todo esto en mente cambio las 4 clases del common module y le agrego el field version:number.Actualizo la dependencia en los srv Orders y Tickets.

				VIDEO 392 UPDATING TICKETS EVENT DEFINITIONS

Donde emitamos un evento le agrego version: ticket.version y ejecuto de nuevo la suite de tests.En el Tickets Srv no habrá problemas pero en el Orders hay varias cosas que hacer,pues ni siquiera tenemos esta propiedad en el Schema.
Fijate que hemos dejado la DB y la publicación por parte del Tickets srv bien,pero el orders va a tener bastante trabajo.

				VIDEO 394 APPLYING A VERSION QUERY

Vamos a instalar el plugin para Optimistic Concurrency Control en el Orders Srv:
npm i mongoose-update-if-current
Lo vamos a conectar al Schema Ticket,no al Order.
import { updateIfCurrentPlugin } from "mongoose-update-if-current"

TicketSchema.set('versionkey','version');
TicketSchema.plugin(updateIfCurrentPlugin);

Vayamos por los Listeners,tienen que recibir esta propiedad.También recuerda que no vamos a buscar por id más,sino por el id + version-1:

 // const ticket = await Ticket.findById(data.id); <- ya no será así

      const ticket = await  Ticket.findOne({ 
         _id: data.id,
         version: data.version - 1
      })

Despues de encontrar o no ese ticket le cambiaremos el price y/o title y lo guardaremos:
  const { title, price } = data;
      ticket.set({ title, price });
      await ticket.save();
NOTA: es cuando hagamos ese await ticket.save() cuando se incrementará el número de version,ya que acabamos de conectar el plugin a este ticketSchema también,asi que lo hará mongoose por nosotros.

Nos logeamos y creamos y actualizamos un ticket con Postman.Puedo ver que la version es guardada e incrementada por el Tickets srv,y que el Orders recibe el evento.

					VIDEO 395 DID IT WORK?

Vamos a realizar el mismo test que antes,creando un ticket,actualizando su price a 10$ y despues a 15$.Esta vez esperamos que el await Ticket.findOne({ _id:data.id,version:data.version -1}) falle en su busqueda y arroje el throw new Error().
Al suceder esto no se llamara al msg.ack() y NATS lo re-emitirá al de 5s.
Además que pararán los logs unos segundos puedo apreciar los Errores por consola,y como despues se re-emiten.
Por último Stephen ejecutó db.tickets.find({price:15}).length() en ambos y tiene 400,no se ha perdido ni uno,asinto.

NOTA: hay gente que se le está cerrando NATS por ese throw new Error:

NATS closing connection when throwing an error
2 votos
Martin · Clase 395 · hace 11 meses
I'm noticing that if I throw an error inside of my listener it's actually closing the NATS connection alltogether rather than simply not ackgnowledging the message.

For now I've switched to

if (!ticket)
      return console.log(`Ticket version ${version} coming in out of order`)

ratehr than throwing an error and it's working as expected now... Any ideas why it's behaving this way? Obviously it's not ideal if NATS is closing the connection any time a listener errors!

Cambiar a un return ... si me sucede 

					VIDEO ABSTRACTED QUERY METHOD

Realmente a Stephen no le gusta la sintaxis de la query con el findOne,asi que vamos a crear un nuevo método en el modelo Ticket cual prehistorics. 
NOTA:fijate en este nuevo conocimiento,puedo pasar a un argumento que sea un objeto con ciertas propiedades:

interface TickeModel extends mongoose.Model<TicketDoc> {
  build(attrs:TicketAttrs):TicketDoc
  findByEvent(event:{id:string,version:number}):Promise<Ticketdoc | null> <- null porque puede que no lo encuentre(es lo que devolverá findOne)

* el argumento event debe ser un objeto con las propiedades id y version
Realmente ese argumento event podría tener más propiedades,pero tienen que tener id y version fijo.Con esto en mente puedo crear un método estático:
TicketSchema.statics.findByEvent = (event:{id:string,version:number}) => {
  return Ticket.findOne({
    _id: event.id,
    version: event.version - 1,
  }) }

Ahora ya es sustituir,asin:
const ticket = await Ticket.findByEvent(data) ;
Hacemos una nueva prueba con postman y veo que todo funciona igual.Fijate lo fácil que es crear método estáticos o de instancia en un Model,etc...

			VIDEO 397 OPTIONAL VIDEO - VERSION WITHOUT UPDATE IF CURRENT

Es importante entender que usar este plugin conlleva consecuencias.Para nuestra app no será importante,pero imaginate que en un futuro el Tickets srv ya no usa MongoDb y usa SQL o se decide que no vaya de 1 en 1 el field 'version'.
En este caso tendríamos un problema,ya que el plugin trabaja sólo y va a incrementar la versión tal como tiene él programado.
O también imagina que usan el campo 'version' con la fecha.
Este video es para configurar todo sin usar el plugin.

				VIDEO 398 TESTING LISTENERS

Dentro de cada test de un LIstener vamos a realizar lo mismo,crear una instancia de la clase que heredaba del common module,crear la data para el onMessage y alli afirmaremos que cree el ticket,lo actualice,no lo encuentre,...

*Dado que hay código repetitivo puedo crear una función inicial con el setup que comparta cada test.
const setup = async () => {
   // create an instance of the listener

   // create a fake data event

   // create a fake message object so I can call ack
}

it('creates and saves a ticket', async () => {
   // call the onMessage function with the data object and the fake message object
   
   // write assertions to make sure a ticket was created
});

it('acks the message', async () => {
   // call the onMessage function with the data object and the fake message object

   // write assertions to make sure the ack function is called
})

					VIDEO 399 IMPLEMENTING THE TEST

Fijate que voy a guardar en la InMemoryDB(aunque esté en un ambiente de tests,estoy usando MongoDB) asi que debo pasar ids válidos:

 const data: TicketCreatedEvent['data'] = {
    version: 0,
    id: new mongoose.Types.ObjectId().toHexString(),
    title: 'concert',
    price: 10,
    userId: new mongoose.Types.ObjectId().toHexString()
 };

Fijate que para pasar el msg:Message TS me va a pedir que implemente un montón de métodos.Realmente no lo necesito para las pruebas,asi que vamos a ignorar a TS:
   
   // create a fake message object so I can call ack
   // @ts-ignore
      const msg:Message  = {
         ack: jest.fn()
   }
Realmente es una opción correcta ignorarle en este contexto.Fijate que tengo que hacer el return de estos tres objetos!:
const setup = async () => {
  ...
  return { listener, data, msg };
}
Dadi que lo que vamos a hacer es publicar esa data y crear un ticket simplemente podemos esperar que encontraremos uno con ese id,ese precio,etc...


it('creates and saves a ticket', async () => {
   const { listener, data, msg } = await setup();
   // call the onMessage function with the data object and the fake message object
   listener.onMessage(data, msg);
   // write assertions to make sure a ticket was created(buscar uno con el id que me mandó el evento)
   const ticket = await Ticket.findById(data.id);
   expect(ticket).toBeDefined();
   expect(ticket!.title).toEqual(data.title);
   expect(ticket!.price).toEqual(data.price);
});
El otro test era expect(msg.ack().toHaveBeenCalled().Todo perfecto.

				VIDEO 401 TESTING THE TICKET UPDATED LISTENER

Es importante entender que el setup va a ser más complejo,ya que hay alguna propiedad que necesita un valor en específico:

const setup = async () => {
   const listener = new TicketUpdatedListener(natsWrapper.client);
   // create and save a ticket(si es un update habrá que crear un nuevo ticket,asinto -_-)
   const ticket = Ticket.build({
      id:  mongoose.Types.ObjectId().toHexString(),
      title: 'concert',
      price: 20,
   });
   await ticket.save();

   // create a fake data object
   const data: TicketUpdatedEvent['data'] = {
      version: ticket.version + 1,
      id: ticket.id,
      title: 'concert two',
      price: 20,
      userId: new mongoose.Types.ObjectId().toHexString()
   };

   // create a fake message object so I can call ack
   // @ts-ignore
      const msg:Message  = {
         ack: jest.fn()
   }
   // return all of this stuff
   return { listener, data, msgi,ticket };
}

Fijate que hay que crear un ticket,guardarlo y despues cambiarle algo y aumentarle la versión,si no fallará.Además lo retornamos también,por que no? jaja.Putos pros

				VIDEO 402 SUCCESS CASE TESTING

Recuerda que es lo que retorna mi función asyn setup():

   return { listener, data, msg, ticket };
}

it('finds,updates and saves a ticket', async () => {
   const { listener, data, msg, ticket } = await setup();
   *aqui es donde se actualiza
   await listener.onMessage(data, msg);

   const updatedTicket = await Ticket.findById(ticket.id);
   expect(updatedTicket!.title).toEqual(data.title);
   expect(updatedTicket!.price).toEqual(data.price);
   expect(updatedTicket!.version).toEqual(data.version);
})

it('acks the message', async () => {
   const { listener, data, msg } = await setup();

   await listener.onMessage(data, msg);

   expect(msg.ack).toHaveBeenCalled();
})
Fijate como para ver si se llama a msg.ack() no necesito el ticket.Es buena idea hacer que fallen también,comentando la llamada al onMessage y viendo que falla el test,no hagas solo el 'camino feliz'.

					VIDEO 403 OUT OF ORDER EVENT

 No hemos comprobado que sucede si la version no encaja,tenemos que testear que no se llame a msg.ack si hay un fallo en el numero de versión:

it('does not call ack if the event has a skipped version number', async () => { 
   const { listener, data, msg, ticket } = await setup();

   data.version = 10;

   try {
      await listener.onMessage(data, msg);
   } catch (err) {}

   expect(msg.ack).not.toHaveBeenCalled();
});

En el sigiente video conectaremos el plugin al OrderSchema:

OrderSchema.set('versionKey','version');
OrderSchema.plugin(updateIfCurrentPlugin);

REcuerda que hay que agregar el field 'version' a la interfaz que extiende de Document.

			VIDEO 406 FIXING A FEW TESTS

 Es simplemente poner el id y la version donde TS lo diga,cual asintos.

			VIDEO 407 TICKET SRV LISTENING TO ORDER EVENTS

Ya hemos testeado que el Orders Srv recibe los eventos ticket:created y ticket:updated e incluso hemos testeado que emita los order:created y order:updated.
Realmente el Tickets srv debe escuchar por estos eventos,y aún no lo hace.
Esto es así porque necesita saber que un ticket ha sido reservado,para bloquearlo y que por ejemplo no cambie el precio misteriosamente en el último momento...
Recuerda que además el Payments Srv también necesita conocer las Orders que pueden ser resueltas en un pago y el Expiration srv necesita conocer también las órdenes para bloquearlas 15 minutos.


import { Listener, OrderCreatedEvent, Subjects } from "@oscargmk8s/common";
import { Message } from "node-nats-streaming";
import { queueGroupName } from './queue-group-name';

export class OrderCreatedListener extends Listener<OrderCreatedEvent> {
   readonly subject = Subjects.OrderCreated;
   queueGroupName = queueGroupName;

   async onMessage(data: OrderCreatedEvent['data'], msg: Message){

   }
}

				VIDEO 408 STRATEGIES FOR LOCKING A TICKET

La opción más sencilla sería una campo isLocked:boolean,pero veremos que se queda corta:
1- Puede saber el dueño del ticket quién o el estado de la orden? No,sólo sabría que el ticket está bloqueado.Asi que vamos a guardar el orderId de la 	ordén que lo está reservando para que pueda ver esa información.
ASi pues vamos a usar la presencia de una orderId para determinar si un ticket está reservado o no(por defecto será null) 
Claro que esto me hará cambiar el Document del TicketShema agregando este campo aentre otros menores cambios

					VIDEO 409 RESERVING A TICKET

Dado que es una propiedad opcional hay que especificarlo también,asin:

interface TicketDoc extends Document {
   title: string;
   price: number;
   userId: string;
   version: number;
   orderId?: string;
}

Ahora ya podemos crear la lógica que guardará esta nueva propiedad cuando suceda el evento Order:created:

  async onMessage(data: OrderCreatedEvent['data'], msg: Message){
      // find the ticket that the order is reserving
      const ticket = await Ticket.findById(data.ticket.id);
      // if no ticket, throw error
      if(!ticket){
         throw new Error('Ticket not found');
      }
      // mark the ticket as reserved by setting its orderId
      ticket.set({ orderId: data.id });
      // save the ticket
      await ticket.save();
      // ack the message
      msg.ack();
   }
}
Busco el ticket,controlo que no se encuentre y le añado la prop,por último doy fé de la recepción del evento publicado.

				VIDEO 410 SETUP FOR TESTING RESERVATION

Vamos a seguir los mismos pasos que en el testeo de los listener del Orders srv(crear una primera función para el setup,etc...)
Fijate que cuando testee el created tendré que crear un ticket o una orden,payment,etc...

const setup = async () => {
   const listener = new OrderCreatedListener(natsWrapper.client);
   const ticket = Ticket.build({
      title: 'concert',
      price: 99,
      userId: 'asdf',
   });
   await ticket.save();
   const data: OrderCreatedEvent['data'] = {
      id: mongoose.Types.ObjectId().toHexString(),
      version: 0,
      status: OrderStatus.Created,
      userId: 'asldkfj',
      expiresAt: 'alskdfj',
      ticket: {
         id: ticket.id,
         price: ticket.price,
      }
   };
   // @ts-ignore
      const msg:Message  = {
         ack: jest.fn()
   }
   return { listener,ticket, data, msg };
}
De nuevo fijate que cuando sea el created hay que devolver esa instancia también.Fijate que hay propiedades que no necesitan más que cumplir el tipado como userId.
NOTA: puedo mantener CTRL al hacer hover sobre cualquier elemento para ver información más detallada en VSCODE

						VIDEO 411 TEST IMPLEMENTATION

Ahora que ya tenemos la función init podemos crear los tests.


it('should set the userId of the ticket', async () => {
   const { listener,ticket, data, msg } = await setup();
   // call the onMessage function with the data object and the fake message object
   await listener.onMessage(data, msg);
   // write assertions to make sure a ticket was created(buscar uno con el id que me mandó el evento)
   const updatedTicket = await Ticket.findById(ticket.id);
   expect(updatedTicket!.orderId).toEqual(data.id);
});

El segundo es asegurarse que se llama al ack().Fijate como lo que hay que mirar es que la nueva propiedad orderId sea igual al data.id que es el id de la orden.
Por último siempre hay que tratar de que la prueba falle,Stephen comenta que me puede ayudar mucho hacer una pequeña prueba forzando algún fallo.
Fijate que es la recepción del listener lo que creará este fiel:
await listener.onMessage(data, msg); <- la lógica de la recepción crea el field
Realmente no se trata de sólo escuchar por acciones,sino de estar a la espera de que algo suceda para poder realizar cualquier tipo de lógica/acción por ello.

						VIDEO 412 MISSING UPDATE EVENT

Tal como está el código hay un problema con las versiones.Imagina que se crea un ticket(version 0),se reserva y por ello se añade una nueva propiedad,mongoose-update-if-current va a detectar este cambio e incrementar la versión(v1),despues se cancela esa reserva(v2) y el dueño decide subir el precio(v3).
A nuestro Orders srv sólo le ha llegado el Ticket:created(con v0) y ahora le esta llegando un ticket:updated con version 3.

La solución es bien fácil,y es emitir un evento al Orders srv cada vez que se haga un cambio en el Ticket(no sólo al crearlo):

// mark the ticket as reserved by setting its orderId
ticket.set({ orderId: data.id }); <- esto es un CAMBIO
// save the ticket
await ticket.save();
Dado que estamos cambiando el ticket hay va a entrar el plugin,hay que controlar esto informando(publicando) el cambio de versión.

			VIDEO 413 PRIVATE VS PROTECTED PROPERTIES

Recuerda que para publicar un evento era así:
  ticket.set({ orderId: data.id });
  new TicketUpdatedPublisher(natsWrapper.client).publish({

Sin embargo,esto fijate que me obliga a importar la instancia singleton natsWrapper de ese proyecto en cualquier clase que herede de Listener o de Publisher.Esto puede dar problemas en el testing y además es muy fácil de evitar esta importación.
Si voy a la definición de estas clases abstractas veré que tienen la propiedad private client:Stan;
Nuestras subclases heredan de Listener<T> asi que en teoria tienen ya un client:Stan pero como es privado no tienen acceso.
Asi pues la solución será marcar esta propiedad como protected y asi evitamos una dependencia entre archivos.

Aparte nuestro publisher no sabe nada de la última propiedad nueva OrderId así que hay que ir a nuestro common module y hacer estos dos cambios.

					VIDEO 414 PUBLISHING WHILE LISTENING

Voy al common y cambio la propiedad tanto en el base-listener como en el base-publisher.Sin embargo,sólo vamos a añadir la prop orderId en el ticket-updated,no hace falta en el ticket-created pues nunca la va a tener al crear un ticket.

export interface TicketUpdatedEvent {
  subject: Subjects.TicketUpdated;
  data: {
    id: string;
    version: number;
    title: string;
    price: number;
    userId: string;
    orderId?: string; 
  };
}

La marcamos como opcional también.Publicamos la nueva version y actualizamos los dos servicios.
Ahora ya podré acceder a la propiedad con this,pues es una simple prop que heredo.Y fijate como estamos creando un listener que también publica:

export class OrderCreatedListener extends Listener<OrderCreatedEvent> {
   readonly subject = Subjects.OrderCreated;
   queueGroupName = queueGroupName;

   async onMessage(data: OrderCreatedEvent['data'], msg: Message){
      const ticket = await Ticket.findById(data.ticket.id);
      if(!ticket){
         throw new Error('Ticket not found');
      }
      await ticket.set({ orderId: data.id });
      await new TicketUpdatedPublisher(this.client).publish({
         id: ticket.id,
         price: ticket.price,
         title: ticket.title,
         userId: ticket.userId,
         orderId: ticket.orderId,
         version: ticket.version
         });      
      await ticket.save();
      msg.ack();
   }
}
Perfectamente se puede publicar en la recepción de una publicacion(un listener).De echo es algo común.

					VIDEO 415 MOCK FUNCTION ARGUMENTS

Dado que estamos emitiendo un evento en la recepción de otro sería buena idea testear todo esto cual asintos. 
Es importante entender esto,en el test estoy trabajando con el natsWrapper del mcock:

export const natsWrapper = {
   client: {
      publish: jest.fn().mockImplementation( (subject: string,data:string , callback: () => void) =>{
         callback();
      })
   }
};

En el setup lo puedo ver muy claro esto:
tup = async () => {
   // create an instance of the listener
   const listener = new OrderCreatedListener(natsWrapper.client) <- es el mock

Con todo esto en mente habrá que testear sobre ese natsWrapper realmente:
it('publishes a ticket updated event', async () => {
   const { listener, data, msg } = await setup();
   await listener.onMessage(data, msg);
   expect(natsWrapper.client.publish).toHaveBeenCalled();

Para poder acceder a los argumentos de una función que se hizo jest.mock() tengo que usar la propiedad mock.calls, la cual devuelve un array,ojo.
TS no va a saber interpretarlo pues no sabe que es un mock de un archivo.
 // @ts-ignore
   console.log(natsWrapper.client.publish.mock.calls) 
    [
      [
        'ticket:updated',
        '{"id":"6198e34147f6e311c7602688","price":99,"title":"concert","userId":"asdf","orderId":"6198e34147f6e311c760268a","version":0}',
        [Function (anonymous)]
      ]
    ]
Asi que ahora ya puedo comprobar los valores de los argumentos,accediendo al array como desee.Fijate que me viene todo en JSON asi que tendré que parsearlo a JS

(natsWrapper.client.publish as Jest.Mock).mock.calls[0][1] <- el casteo me va a ayudar para poder quitar ese ts-ignore

* asi pues creo estas dos sentencias,ya tengo todo claro.
   const ticketUpdatedData = JSON.parse((natsWrapper.client.publish as jest.Mock).mock.calls[0][1]);

   // recuerda que en data tengo LA ORDENasi que el id de la orden deberia ser el mismo que la nueva propiedad,confirmando que se ha emitido el evento,pues ha realizado su lógica
   expect(data.id).toEqual(ticketUpdatedData.orderId);
});

					VIDEO 416 ORDER CANCELLED LISTENER

Nuestro Order srv en algun punto emitirá el order:cancelled,para nosotros esto significa buscar ese ticket y remover la propiedad OrderId.

NOTA: TS trabaja realmente mal con propiedades opcionales y el valor null.Es mejor poner undefined para quitar esta propiedad OrderId:

ticket.set({orderId: undefined}) <- para quitar una propiedad usar undefined

Simplemente creo el file order-cancelled-listener con el mismo código que el created pero quitando la prop orderId en vez de poniendola.

				VIDEO 417 LIGHTNING-QUICK TEST

it('updates the ticket,publishes an event and acks the message', async () => {
   const { listener, ticket, orderId, data, msg } = await setup();

   await listener.onMessage(data, msg);

   const updatedTicket = await Ticket.findById(ticket.id);
   expect(updatedTicket!.orderId).toBe(undefined);
   expect(updatedTicket!.orderId).not.toBeDefined();

   expect(msg.ack).toHaveBeenCalled();

   expect(natsWrapper.client.publish).toHaveBeenCalled();

});

En vez de hacer tres test hacemos todo en uno,esperaremos que tras llamar al evento el ticket no tenga la propiedad orderId.

					VIDEO 418 DONT'T FORGET TO LISTEN!    

Fijate que aún no hemos puesto al Tickets srv a escuchar por estos eventos,asi que lo hacemos:

new OrderCreatedListener(natsWrapper.client).listen();
new OrderCancelledListener(natsWrapper.client).listen();

			VIDEO 419 REJECTING EDITS OF RESERVED TICKETS

Aún no hemos creado la lógica de que hacer cuando un ticket esté reservado(es decir,tenga ese campo orderId).Hagamoslo y hagamos un test rápido también. 

Simplemente es añadir esto en el controlador del ticket.update.ts

 if(ticket.orderId) {
     throw new BadRequestError('Cannot edit a reserved ticket'); 
   }

El test será sencillo, creo un ticket logeandome con la cookie, y lo busco y le añado la propiedad,ahora trato de actualizarlo y deberá arrojar un 400 BadRequest:

 test('rejects updates if the ticket is reserved', async () => {
      const cookie = global.signin();
      const response = await request(app)
         .post('/api/tickets')
         .set('Cookie', cookie)
         .send({
            title: 'titulo',
            price: 10
         })

      // lo busco de nuevo y le pongo la propiedad orderId simulando que está reservado y lo guardo
      const ticket = await Ticket.findById(response.body.id);
      
      ticket!.set({ orderId: mongoose.Types.ObjectId().toHexString() });
      await ticket!.save();
      
      // ahora trato de actualizarlo mientras está reservado
      await request(app)
         .put(`/api/tickets/${response.body.id}`)
         .set('Cookie', cookie)
         .send({
            title: 'titulo updated',
            price: 2000
         })
         .expect(400)
   })
REcuerda hacer la prueba contraria,comentando el seteo de la propiedad para que no la tenga y deberia recibir un 200,pues no estaría reservado en ese caso.
Seguiremos por el Expiration Service




